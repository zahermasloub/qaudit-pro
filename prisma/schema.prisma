// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EngagementStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum PBCStatus {
  open
  partial
  complete
}

enum TestStatus {
  planned
  in_progress
  completed
  blocked
}

enum SamplingMethod {
  random
  judgment
  monetary
}

enum RunResult {
  pass
  fail
  exception
}

enum VirusScanStatus {
  pending
  clean
  suspected
  blocked
}

enum EvidenceStatus {
  active
  archived
}

enum StorageProvider {
  local
  s3
}

enum BackupStatus {
  pending
  running
  success
  failed
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String   // bcrypt hash
  role      String   @default("IA_Auditor")
  locale    String   @default("ar")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     UserRole[]

  @@map("users")
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  permissions Permission[]
  users       UserRole[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("roles")
}

model Permission {
  id    String @id @default(cuid())
  key   String @unique
  label String?
  roles Role[]

  @@map("permissions")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String?
  type      String?
  updatedBy String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([key])
  @@map("system_settings")
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String?
  actorEmail String?
  action     String
  target     String?
  ip         String?
  userAgent  String?
  payload    Json?
  createdAt  DateTime @default(now())

  @@index([action, createdAt])
  @@index([actorEmail, createdAt])
  @@map("audit_logs")
}

model BackupJob {
  id          String       @id @default(cuid())
  startedAt   DateTime     @default(now())
  finishedAt  DateTime?
  status      BackupStatus @default(pending)
  storage     String
  location    String?
  sizeBytes   Int?
  message     String?
  triggeredBy String?

  @@index([status, startedAt])
  @@map("backup_jobs")
}

model BackupSchedule {
  id        String    @id @default(cuid())
  cronExpr  String
  enabled   Boolean   @default(true)
  storage   String    @default("local")
  lastRunAt DateTime?
  createdBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("backup_schedules")
}

model Engagement {
  id                        String   @id @default(cuid())
  code                      String   @unique
  title                     String
  objective                 String
  scopeJson                 Json
  criteriaJson              Json
  constraintsJson           Json
  auditeeUnitsJson          Json
  stakeholdersJson          Json
  startDate                 DateTime
  endDate                   DateTime
  budgetHours               Int
  independenceDisclosureUrl String?
  status                    EngagementStatus @default(DRAFT)
  createdBy                 String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  // Relations
  plans                     Plan[]
  pbcRequests               PBCRequest[]
  auditTests                AuditTest[]
  evidenceFiles             Evidence[]

  @@map("engagements")
  @@index([status])
}

model Plan {
  id                    String   @id @default(cuid())
  engagementId          String
  timelineJson          Json
  milestonesJson        Json
  communicationCadence  String
  dataStrategyJson      Json
  raciJson              Json
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  engagement            Engagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)

  @@map("plans")
  @@index([engagementId])
}

model PBCRequest {
  id              String   @id @default(cuid())
  engagementId    String
  code            String
  description     String
  ownerId         String
  dueDate         DateTime
  status          PBCStatus @default(open)
  attachmentsJson Json
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  engagement      Engagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)

  @@map("pbc_requests")
  @@index([status])
  @@unique([code, engagementId])
}

model AuditTest {
  id              String     @id @default(cuid())
  engagementId    String
  code            String
  title           String
  objective       String
  controlId       String?
  riskId          String?
  testStepsJson   Json
  expectedResults String
  actualResults   String?
  conclusion      String?
  status          TestStatus @default(planned)
  assignedTo      String?
  plannedHours    Int?
  actualHours     Int?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  engagement      Engagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  samples         Sample[]
  testRuns        TestRun[]
  evidenceFiles   Evidence[]

  @@map("audit_tests")
  @@index([status])
  @@unique([code, engagementId])
}

model Sample {
  id              String         @id @default(cuid())
  testId          String
  method          SamplingMethod
  populationSize  Int
  sampleSize      Int
  confidenceLevel Float?
  precisionRate   Float?
  selectionHash   String         // SHA256 of selection criteria
  criteriaJson    Json           // Selection criteria/parameters
  itemsJson       Json           // Selected sample items
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  test            AuditTest      @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("samples")
  @@index([method])
}

model TestRun {
  id            String    @id @default(cuid())
  engagementId  String
  auditTestId   String
  stepIndex     Int
  actionTaken   String
  result        RunResult
  notes         String?
  sampleRef     String?
  evidenceIds   String[]  @default([])
  executedBy    String
  executedAt    DateTime  @default(now())

  // Relations
  auditTest     AuditTest @relation(fields: [auditTestId], references: [id], onDelete: Cascade)

  @@map("test_runs")
  @@index([engagementId])
  @@index([auditTestId])
  @@index([result])
}

model Evidence {
  id               String           @id @default(cuid())
  engagementId     String
  category         String           // invoice/contract/log/screenshot/sql-export/...
  status           EvidenceStatus   @default(active)

  // روابط
  linkedTestId     String?
  linkedSampleRef  String?
  linkedFindingId  String?

  // تخزين
  storage          StorageProvider  @default(local)
  storageKey       String           // path/key (محلي أو S3)
  bucket           String?          // لـ S3
  fileName         String
  fileExt          String?
  mimeType         String?
  fileSize         Int              // بالبايت
  fileHash         String?          // sha256

  ocrTextUrl       String?
  virusScanStatus  VirusScanStatus  @default(pending)

  uploadedBy       String
  uploadedAt       DateTime         @default(now())

  // Relations
  engagement       Engagement       @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  linkedTest       AuditTest?       @relation(fields: [linkedTestId], references: [id], onDelete: SetNull)

  @@map("evidence_files")
  @@index([engagementId])
  @@index([linkedTestId])
  @@index([linkedFindingId])
  @@index([category])
  @@index([status])
}

// Annual Plan Models
enum AnnualPlanStatus {
  draft
  under_review
  approved
  cancelled
  completed
}

enum RiskLevel {
  very_high
  high
  medium
  low
}

enum AuditType {
  financial
  operational
  compliance
  it_systems
  performance
  advisory
}

enum Quarter {
  Q1
  Q2
  Q3
  Q4
}

enum AuditTaskStatus {
  not_started
  in_progress
  completed
}

model AnnualPlan {
  id                    String            @id @default(cuid())
  title                 String
  fiscalYear            Int
  version               String            @default("1.0")
  status                AnnualPlanStatus  @default(draft)
  introduction          String?           @db.Text
  totalAvailableHours   Int?
  plannedTaskHours      Int?
  advisoryHours         Int?
  emergencyHours        Int?
  followUpHours         Int?
  trainingHours         Int?
  administrativeHours   Int?
  estimatedBudget       Float?
  createdBy             String
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relations
  auditTasks            AuditTask[]
  approvals             PlanApproval[]

  @@map("annual_plans")
  @@index([fiscalYear])
  @@index([status])
}

model AuditTask {
  id                  String           @id @default(cuid())
  annualPlanId        String
  code                String
  title               String
  department          String
  riskLevel           RiskLevel
  auditType           AuditType
  objectiveAndScope   String?          @db.Text
  plannedQuarter      Quarter
  estimatedHours      Int
  leadAuditor         String?
  attachmentsJson     Json             @default("[]")
  status              AuditTaskStatus  @default(not_started)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  // Relations
  annualPlan          AnnualPlan       @relation(fields: [annualPlanId], references: [id], onDelete: Cascade)

  @@map("audit_tasks")
  @@index([annualPlanId])
  @@index([riskLevel])
  @@index([status])
  @@unique([code, annualPlanId])
}

model PlanApproval {
  id                String      @id @default(cuid())
  annualPlanId      String
  approverName      String
  approverRole      String      // preparer, reviewer, approver
  approvalDate      DateTime    @default(now())
  comments          String?     @db.Text

  // Relations
  annualPlan        AnnualPlan  @relation(fields: [annualPlanId], references: [id], onDelete: Cascade)

  @@map("plan_approvals")
  @@index([annualPlanId])
}
