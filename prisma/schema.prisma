// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EngagementStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum PBCStatus {
  open
  partial
  complete
}

enum TestStatus {
  planned
  in_progress
  completed
  blocked
}

enum SamplingMethod {
  random
  judgment
  monetary
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String   // bcrypt hash
  role      String   @default("IA_Auditor")
  locale    String   @default("ar")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Engagement {
  id                        String   @id @default(cuid())
  code                      String   @unique
  title                     String
  objective                 String
  scopeJson                 Json
  criteriaJson              Json
  constraintsJson           Json
  auditeeUnitsJson          Json
  stakeholdersJson          Json
  startDate                 DateTime
  endDate                   DateTime
  budgetHours               Int
  independenceDisclosureUrl String?
  status                    EngagementStatus @default(DRAFT)
  createdBy                 String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  // Relations
  plans                     Plan[]
  pbcRequests               PBCRequest[]
  auditTests                AuditTest[]

  @@map("engagements")
  @@index([status])
}

model Plan {
  id                    String   @id @default(cuid())
  engagementId          String
  timelineJson          Json
  milestonesJson        Json
  communicationCadence  String
  dataStrategyJson      Json
  raciJson              Json
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  engagement            Engagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)

  @@map("plans")
  @@index([engagementId])
}

model PBCRequest {
  id              String   @id @default(cuid())
  engagementId    String
  code            String
  description     String
  ownerId         String
  dueDate         DateTime
  status          PBCStatus @default(open)
  attachmentsJson Json
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  engagement      Engagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)

  @@map("pbc_requests")
  @@index([status])
  @@unique([code, engagementId])
}

model AuditTest {
  id              String     @id @default(cuid())
  engagementId    String
  code            String
  title           String
  objective       String
  controlId       String?
  riskId          String?
  testStepsJson   Json
  expectedResults String
  actualResults   String?
  conclusion      String?
  status          TestStatus @default(planned)
  assignedTo      String?
  plannedHours    Int?
  actualHours     Int?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  engagement      Engagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  samples         Sample[]

  @@map("audit_tests")
  @@index([status])
  @@unique([code, engagementId])
}

model Sample {
  id              String         @id @default(cuid())
  testId          String
  method          SamplingMethod
  populationSize  Int
  sampleSize      Int
  confidenceLevel Float?
  precisionRate   Float?
  selectionHash   String         // SHA256 of selection criteria
  criteriaJson    Json           // Selection criteria/parameters
  itemsJson       Json           // Selected sample items
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  test            AuditTest      @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("samples")
  @@index([method])
}
